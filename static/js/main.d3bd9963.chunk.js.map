{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","ErrorBoundry","hasError","error","info","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d3bd9963.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 tc grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?150x200`} alt=\"photo\"></img>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  console.log(\"Cardlist\")\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card key={i} id={user.id} name={user.name} email={user.email} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  console.log(\"SearchBox\")\n  return (\n    <div className=\"pa2\">\n      <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange} />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState((state) => {\n      return { count: this.state.count + 1 };\n    });\n  };\n\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n//   shouldComponentUpdate(nextProps, nextState) {\n//     return false;\n//   }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, {Component} from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Header from '../components/Header'\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { requestRobots, setSearchField } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header/>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\n    response\n      .json()\n      .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch((error) =>\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n      )\n  );\n};\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://cra.link/PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n    }\n  };\n  \n  export default reportWebVitals;\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport tachyons from \"tachyons\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}